name: DEV - Deploy to Nomad Cluster

on:
  push:
    #branches: [ develop ]

env:
  # Organization Secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  NOMAD_CLUSTER: ${{ secrets.NOMAD_TEST_ADDRESS }}
  NOMAD_TOKEN: ${{ secrets.NOMAD_TEST_TOKEN }}

  APP_NAME:  quicklauncher       # Application 이름. Image TAG Prefix로 사용 됨
  AWS_REGION: ap-northeast-2       # AWS EKS & ECR이 위치한 AWS Region
  DEPLOY_ENV : dev

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # 소스 가져오기
    - name: Checkout
      uses: actions/checkout@v2

    # AWS credentials 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # AWS ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Waypoint 설치
    - name: Waypoint install
      id: waypoint-install
      run: |
        # waypoint 설치 #1
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install waypoint
    # Docker에 waypoint 서버 설치
    - name: Waypoint server install on docker platform
      id: waypoint-server-install-docker
      run: |
        # Waypoint Server Install
        sudo waypoint install -platform=docker -accept-tos

    # waypoint context 등록 및 설정
#     - name: Waypoint context setting
#       id: waypoint-context
#       run: |
#         # Waypoint Server Context 등록
#         sudo waypoint context create -server-addr=3.38.211.125:9701 remote
#         #waypoint context user local

    # Waypoint Init
    - name: Waypoint Init
      id: waypoint-init
      run: |
        # Waypoint 초기화
        sudo waypoint init
    # 난수 생성
    - name: Short sha
      run: echo "short_sha=`echo ${{github.sha}} | cut -c1-8`" >> $GITHUB_ENV

    # Waypoint build
    - name: Waypoint Build
      id: waypoint-build
      env:
        ECR_ADDR:  ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/ecr-${{ env.DEPLOY_ENV }}-${{ env.APP_NAME }}
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_ADDR }}
        # Waypoint build
        sudo waypoint build -var="ecr_repo=${{ env.ECR_REPOSITORY }}" -var="image_tag=${{ env.DEPLOY_ENV }}-quicktest_y5eaukhu-${{ env.short_sha }}"

  deploy:
    needs: build
    name: Deploy to DEV Environment
    runs-on: ubuntu-latest

    steps:
    # 소스 가져오기
    - name: Checkout
      uses: actions/checkout@v2

    # 난수 생성
    - name: Short sha
      run: echo "short_sha=`echo ${{github.sha}} | cut -c1-8`" >> $GITHUB_ENV
      
    # AWS ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 배포를 위한 nomad 설정
    - name: Deploy to Nomad
      id: deploy-nomad
      env:
        ECR_ADDR:  ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: "${{ steps.login-ecr.outputs.registry }}/ecr-${{ env.DEPLOY_ENV }}-${{ env.APP_NAME }}:${{ env.DEPLOY_ENV }}-quicktest_y5eaukhu-${{ env.short_sha }}"
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install nomad
        aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ env.ECR_ADDR }}
        #cnt=`nomad job status -address=${{ env.NOMAD_CLUSTER }} -token=${{ env.NOMAD_TOKEN }} | grep quicktest_y5eaukhu | wc -l`
        # if [ ${cnt} != 0  ]; then nomad job stop -purge -token=${{ env.NOMAD_TOKEN }} -address=${{ env.NOMAD_CLUSTER }} quicktest_y5eaukhu; fi
        nomad job run -token=${{ env.NOMAD_TOKEN }} -address=${{ env.NOMAD_CLUSTER }} -var=image=${{ env.IMAGE_TAG }} ./deploy.nomad

